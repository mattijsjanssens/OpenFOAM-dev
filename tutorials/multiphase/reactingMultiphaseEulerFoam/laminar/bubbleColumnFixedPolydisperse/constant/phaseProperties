/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      phaseProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

type heatAndMomentumTransferMultiphaseSystem;

phases (airI airII water);

airI
{
    type            purePhaseModel;
    diameterModel   isothermal;
    isothermalCoeffs
    {
        d0              3e-3;
        p0              1e5;
    }

    residualAlpha   1e-6;
}

airII
{
    type            purePhaseModel;
    diameterModel   isothermal;
    isothermalCoeffs
    {
        d0              5e-3;
        p0              1e5;
    }

    residualAlpha   1e-6;
}

water
{
    type            purePhaseModel;
    diameterModel   constant;
    constantCoeffs
    {
        d               1e-4;
    }

    residualAlpha   1e-6;
}

blending
{
    default
    {
        type            linear;
        minFullyContinuousAlpha.airI 0.7;
        minPartlyContinuousAlpha.airI 0.5;
        minFullyContinuousAlpha.airII 0.7;
        minPartlyContinuousAlpha.airII 0.5;
        minFullyContinuousAlpha.water 0.7;
        minPartlyContinuousAlpha.water 0.5;
    }
}

surfaceTension
(
    (airI and water)
    {
        type            constant;
        sigma           0.07;
    }

    (airII and water)
    {
        type            constant;
        sigma           0.07;
    }
);

interfaceCompression
();

aspectRatio
(
    (airI in water)
    {
        type            constant;
        E0              1.0;
    }

    (water in airI)
    {
        type            constant;
        E0              1.0;
    }

    (airII in water)
    {
        type            constant;
        E0              1.0;
    }

    (water in airII)
    {
        type            constant;
        E0              1.0;
    }
);

drag
(
    (airI in water)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (water in airI)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (airI and water)
    {
        type            segregated;
        m               0.5;
        n               8;
        swarmCorrection
        {
            type        none;
        }
    }

    (airII in water)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (water in airII)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (airII and water)
    {
        type            segregated;
        m               0.5;
        n               8;
        swarmCorrection
        {
            type        none;
        }
    }

    (airI in airII)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (airII in airI)
    {
        type            SchillerNaumann;

        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (airI and airII)
    {
        type            segregated;
        m               0.5;
        n               8;
        swarmCorrection
        {
            type        none;
        }
    }
);

virtualMass
(
    (airI in water)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }

    (water in airI)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }

    (airII in water)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }

    (water in airII)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }

    (airI in airII)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }

    (airI in airII)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }
);

heatTransfer
(
    (airI in water)
    {
        type            RanzMarshall;
        residualAlpha   1e-4;
    }

    (water in airI)
    {
        type            RanzMarshall;
        residualAlpha   1e-4;
    }

    (airII in water)
    {
        type            RanzMarshall;
        residualAlpha   1e-4;
    }

    (water in airII)
    {
        type            RanzMarshall;
        residualAlpha   1e-4;
    }

    (airI in airII)
    {
        type            RanzMarshall;
        residualAlpha   1e-4;
    }

    (airII in airI)
    {
        type            RanzMarshall;
        residualAlpha   1e-4;
    }
);

lift
();

wallLubrication
();

turbulentDispersion
();

// Minimum allowable pressure
pMin            10000;


// ************************************************************************* //
